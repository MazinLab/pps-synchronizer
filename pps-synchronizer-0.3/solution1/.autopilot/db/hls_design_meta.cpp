#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("load_secs_ctl", 32, hls_out, 15, "ap_none", "out_data", 1),
	Port_Property("load_ns_ctl", 32, hls_out, 16, "ap_none", "out_data", 1),
	Port_Property("load_subns_ctl", 8, hls_out, 17, "ap_none", "out_data", 1),
	Port_Property("ns_per_clk_ctl", 6, hls_out, 18, "ap_none", "out_data", 1),
	Port_Property("subns_per_clk_ctl", 8, hls_out, 19, "ap_none", "out_data", 1),
	Port_Property("delay_ns_ctl", 32, hls_out, 20, "ap_none", "out_data", 1),
	Port_Property("lockout_ctl", 16, hls_out, 21, "ap_none", "out_data", 1),
	Port_Property("rollover_thresh_ctl", 32, hls_out, 22, "ap_none", "out_data", 1),
	Port_Property("mode_ctl", 4, hls_out, 23, "ap_none", "out_data", 1),
	Port_Property("capture_mode_ctl", 2, hls_out, 24, "ap_none", "out_data", 1),
	Port_Property("sanity_mode_ctl", 3, hls_out, 25, "ap_none", "out_data", 1),
	Port_Property("pps_sel_ctl", 3, hls_out, 26, "ap_none", "out_data", 1),
	Port_Property("captured_secs_in", 32, hls_in, 27, "ap_none", "in_data", 1),
	Port_Property("captured_ns_in", 32, hls_in, 28, "ap_none", "in_data", 1),
	Port_Property("captured_subns_in", 8, hls_in, 29, "ap_none", "in_data", 1),
	Port_Property("running_in", 1, hls_in, 30, "ap_none", "in_data", 1),
	Port_Property("secs_in", 32, hls_in, 31, "ap_none", "in_data", 1),
	Port_Property("ns_in", 32, hls_in, 32, "ap_none", "in_data", 1),
	Port_Property("subns_in", 8, hls_in, 33, "ap_none", "in_data", 1),
	Port_Property("captured_in", 1, hls_in, 34, "ap_none", "in_data", 1),
	Port_Property("s_axi_control_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWADDR", 8, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_ARADDR", 8, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "pps_synchronizer_control";
