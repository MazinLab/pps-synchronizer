-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pps_synchronizer_control is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    load_secs_ctl : OUT STD_LOGIC_VECTOR (31 downto 0);
    load_ns_ctl : OUT STD_LOGIC_VECTOR (31 downto 0);
    load_subns_ctl : OUT STD_LOGIC_VECTOR (7 downto 0);
    ns_per_clk_ctl : OUT STD_LOGIC_VECTOR (5 downto 0);
    subns_per_clk_ctl : OUT STD_LOGIC_VECTOR (7 downto 0);
    delay_ns_ctl : OUT STD_LOGIC_VECTOR (31 downto 0);
    lockout_ctl : OUT STD_LOGIC_VECTOR (15 downto 0);
    rollover_thresh_ctl : OUT STD_LOGIC_VECTOR (31 downto 0);
    mode_ctl : OUT STD_LOGIC_VECTOR (3 downto 0);
    capture_mode_ctl : OUT STD_LOGIC_VECTOR (1 downto 0);
    sanity_mode_ctl : OUT STD_LOGIC_VECTOR (2 downto 0);
    pps_sel_ctl : OUT STD_LOGIC_VECTOR (2 downto 0);
    captured_secs_in : IN STD_LOGIC_VECTOR (31 downto 0);
    captured_ns_in : IN STD_LOGIC_VECTOR (31 downto 0);
    captured_subns_in : IN STD_LOGIC_VECTOR (7 downto 0);
    running_in : IN STD_LOGIC_VECTOR (0 downto 0);
    secs_in : IN STD_LOGIC_VECTOR (31 downto 0);
    ns_in : IN STD_LOGIC_VECTOR (31 downto 0);
    subns_in : IN STD_LOGIC_VECTOR (7 downto 0);
    captured_in : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC );
end;


architecture behav of pps_synchronizer_control is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pps_synchronizer_control_pps_synchronizer_control,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=3.906000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=480,HLS_SYN_LUT=760,HLS_VERSION=2022_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

    signal mode_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_config_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal counter_status_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal counter_status_reg_ap_vld : STD_LOGIC;
    signal delay_ns_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal load_secs_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal load_ns_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal load_subns_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal capture_secs_reg_ap_vld : STD_LOGIC;
    signal capture_ns_reg_ap_vld : STD_LOGIC;
    signal capture_subns_reg_ap_vld : STD_LOGIC;
    signal current_secs_reg_ap_vld : STD_LOGIC;
    signal current_ns_reg_ap_vld : STD_LOGIC;
    signal current_subns_reg_ap_vld : STD_LOGIC;
    signal lockout_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal rollover_thresh_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal tmp_fu_475_p4 : STD_LOGIC_VECTOR (8 downto 0);

    component pps_synchronizer_control_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        mode_reg : OUT STD_LOGIC_VECTOR (31 downto 0);
        counter_config_reg : OUT STD_LOGIC_VECTOR (15 downto 0);
        counter_status_reg : IN STD_LOGIC_VECTOR (15 downto 0);
        counter_status_reg_ap_vld : IN STD_LOGIC;
        delay_ns_reg : OUT STD_LOGIC_VECTOR (31 downto 0);
        load_secs_reg : OUT STD_LOGIC_VECTOR (31 downto 0);
        load_ns_reg : OUT STD_LOGIC_VECTOR (31 downto 0);
        load_subns_reg : OUT STD_LOGIC_VECTOR (7 downto 0);
        capture_secs_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        capture_secs_reg_ap_vld : IN STD_LOGIC;
        capture_ns_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        capture_ns_reg_ap_vld : IN STD_LOGIC;
        capture_subns_reg : IN STD_LOGIC_VECTOR (7 downto 0);
        capture_subns_reg_ap_vld : IN STD_LOGIC;
        current_secs_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        current_secs_reg_ap_vld : IN STD_LOGIC;
        current_ns_reg : IN STD_LOGIC_VECTOR (31 downto 0);
        current_ns_reg_ap_vld : IN STD_LOGIC;
        current_subns_reg : IN STD_LOGIC_VECTOR (7 downto 0);
        current_subns_reg_ap_vld : IN STD_LOGIC;
        lockout_reg : OUT STD_LOGIC_VECTOR (15 downto 0);
        rollover_thresh_reg : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    control_s_axi_U : component pps_synchronizer_control_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        mode_reg => mode_reg,
        counter_config_reg => counter_config_reg,
        counter_status_reg => counter_status_reg,
        counter_status_reg_ap_vld => counter_status_reg_ap_vld,
        delay_ns_reg => delay_ns_reg,
        load_secs_reg => load_secs_reg,
        load_ns_reg => load_ns_reg,
        load_subns_reg => load_subns_reg,
        capture_secs_reg => captured_secs_in,
        capture_secs_reg_ap_vld => capture_secs_reg_ap_vld,
        capture_ns_reg => captured_ns_in,
        capture_ns_reg_ap_vld => capture_ns_reg_ap_vld,
        capture_subns_reg => captured_subns_in,
        capture_subns_reg_ap_vld => capture_subns_reg_ap_vld,
        current_secs_reg => secs_in,
        current_secs_reg_ap_vld => current_secs_reg_ap_vld,
        current_ns_reg => ns_in,
        current_ns_reg_ap_vld => current_ns_reg_ap_vld,
        current_subns_reg => subns_in,
        current_subns_reg_ap_vld => current_subns_reg_ap_vld,
        lockout_reg => lockout_reg,
        rollover_thresh_reg => rollover_thresh_reg);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    capture_mode_ctl <= mode_reg(9 downto 8);
    capture_ns_reg_ap_vld <= ap_const_logic_1;
    capture_secs_reg_ap_vld <= ap_const_logic_1;
    capture_subns_reg_ap_vld <= ap_const_logic_1;
    counter_status_reg <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_475_p4),16));
    counter_status_reg_ap_vld <= ap_const_logic_1;
    current_ns_reg_ap_vld <= ap_const_logic_1;
    current_secs_reg_ap_vld <= ap_const_logic_1;
    current_subns_reg_ap_vld <= ap_const_logic_1;
    delay_ns_ctl <= delay_ns_reg;
    load_ns_ctl <= load_ns_reg;
    load_secs_ctl <= load_secs_reg;
    load_subns_ctl <= load_subns_reg;
    lockout_ctl <= lockout_reg;
    mode_ctl <= mode_reg(4 - 1 downto 0);
    ns_per_clk_ctl <= counter_config_reg(13 downto 8);
    pps_sel_ctl <= mode_reg(26 downto 24);
    rollover_thresh_ctl <= rollover_thresh_reg;
    sanity_mode_ctl <= mode_reg(18 downto 16);
    subns_per_clk_ctl <= counter_config_reg(8 - 1 downto 0);
    tmp_fu_475_p4 <= ((captured_in & ap_const_lv7_0) & running_in);
end behav;
