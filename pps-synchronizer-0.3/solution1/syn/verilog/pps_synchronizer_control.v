// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pps_synchronizer_control_pps_synchronizer_control,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=3.906000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=480,HLS_SYN_LUT=760,HLS_VERSION=2022_1}" *)

module pps_synchronizer_control (
        load_secs_ctl,
        load_ns_ctl,
        load_subns_ctl,
        ns_per_clk_ctl,
        subns_per_clk_ctl,
        delay_ns_ctl,
        lockout_ctl,
        rollover_thresh_ctl,
        mode_ctl,
        capture_mode_ctl,
        sanity_mode_ctl,
        pps_sel_ctl,
        captured_secs_in,
        captured_ns_in,
        captured_subns_in,
        running_in,
        secs_in,
        ns_in,
        subns_in,
        captured_in,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

output  [31:0] load_secs_ctl;
output  [31:0] load_ns_ctl;
output  [7:0] load_subns_ctl;
output  [5:0] ns_per_clk_ctl;
output  [7:0] subns_per_clk_ctl;
output  [31:0] delay_ns_ctl;
output  [15:0] lockout_ctl;
output  [31:0] rollover_thresh_ctl;
output  [3:0] mode_ctl;
output  [1:0] capture_mode_ctl;
output  [2:0] sanity_mode_ctl;
output  [2:0] pps_sel_ctl;
input  [31:0] captured_secs_in;
input  [31:0] captured_ns_in;
input  [7:0] captured_subns_in;
input  [0:0] running_in;
input  [31:0] secs_in;
input  [31:0] ns_in;
input  [7:0] subns_in;
input  [0:0] captured_in;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;

wire   [31:0] mode_reg;
wire   [15:0] counter_config_reg;
wire   [15:0] counter_status_reg;
wire    counter_status_reg_ap_vld;
wire   [31:0] delay_ns_reg;
wire   [31:0] load_secs_reg;
wire   [31:0] load_ns_reg;
wire   [7:0] load_subns_reg;
wire    capture_secs_reg_ap_vld;
wire    capture_ns_reg_ap_vld;
wire    capture_subns_reg_ap_vld;
wire    current_secs_reg_ap_vld;
wire    current_ns_reg_ap_vld;
wire    current_subns_reg_ap_vld;
wire   [15:0] lockout_reg;
wire   [31:0] rollover_thresh_reg;
 reg    ap_rst_n_inv;
wire   [8:0] tmp_fu_475_p4;

pps_synchronizer_control_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mode_reg(mode_reg),
    .counter_config_reg(counter_config_reg),
    .counter_status_reg(counter_status_reg),
    .counter_status_reg_ap_vld(counter_status_reg_ap_vld),
    .delay_ns_reg(delay_ns_reg),
    .load_secs_reg(load_secs_reg),
    .load_ns_reg(load_ns_reg),
    .load_subns_reg(load_subns_reg),
    .capture_secs_reg(captured_secs_in),
    .capture_secs_reg_ap_vld(capture_secs_reg_ap_vld),
    .capture_ns_reg(captured_ns_in),
    .capture_ns_reg_ap_vld(capture_ns_reg_ap_vld),
    .capture_subns_reg(captured_subns_in),
    .capture_subns_reg_ap_vld(capture_subns_reg_ap_vld),
    .current_secs_reg(secs_in),
    .current_secs_reg_ap_vld(current_secs_reg_ap_vld),
    .current_ns_reg(ns_in),
    .current_ns_reg_ap_vld(current_ns_reg_ap_vld),
    .current_subns_reg(subns_in),
    .current_subns_reg_ap_vld(current_subns_reg_ap_vld),
    .lockout_reg(lockout_reg),
    .rollover_thresh_reg(rollover_thresh_reg)
);

assign capture_ns_reg_ap_vld = 1'b1;

assign capture_secs_reg_ap_vld = 1'b1;

assign capture_subns_reg_ap_vld = 1'b1;

assign counter_status_reg_ap_vld = 1'b1;

assign current_ns_reg_ap_vld = 1'b1;

assign current_secs_reg_ap_vld = 1'b1;

assign current_subns_reg_ap_vld = 1'b1;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign capture_mode_ctl = {{mode_reg[9:8]}};

assign counter_status_reg = tmp_fu_475_p4;

assign delay_ns_ctl = delay_ns_reg;

assign load_ns_ctl = load_ns_reg;

assign load_secs_ctl = load_secs_reg;

assign load_subns_ctl = load_subns_reg;

assign lockout_ctl = lockout_reg;

assign mode_ctl = mode_reg[3:0];

assign ns_per_clk_ctl = {{counter_config_reg[13:8]}};

assign pps_sel_ctl = {{mode_reg[26:24]}};

assign rollover_thresh_ctl = rollover_thresh_reg;

assign sanity_mode_ctl = {{mode_reg[18:16]}};

assign subns_per_clk_ctl = counter_config_reg[7:0];

assign tmp_fu_475_p4 = {{{captured_in}, {7'd0}}, {running_in}};

endmodule //pps_synchronizer_control
